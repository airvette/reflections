Q: What happens when you initialize a repository? Why do you need to do it?

A: A .git folder is created within the folder that was active at the time of
the command.  It needs to be done so that Git can  prepare to track changes.


Q: How is the staging area different from the working directory and the
repository? What value do you think it offers?

A: The staging area is where files are worked on before being committed.  It is
a more temporary location where if changes are lost it is not too costly.  The
value it offers is that it provides a go-between between the working directory
and the repository while preserving the information in both.


Q: How can you use the staging area to make sure you have one commit per
logical change?

A: One can make sure that they only commit after a logical change.  I'm not
really sure how the staging area makes this any different, isn't the commit
command the primary action?


Q: What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

A: Branches would be helpful when adding new features, fixing bugs or changing
the capabilities of a project.  Branches help by segregrating changes and making
sure that changes intended for one type of problem that is being solved do not
bleed into other areas or, even worse, the last working version of the project.


Q: How do the diagrams help you visualize the branch structure?

A: The diagrams help because it is easy to see when logical changes occurred
relative to the different branches, allowing for easier tracking of changes.


Q: What is the result of merging two branches together? Why do we represent it
in the diagram the way we do?

A: The result is that the changes that were made in both branches are brought
together in the same place.  This is so the feature changes made in both are in
the master copy.  It is represented in the diagram in the described fashion
because it is easier to see how each commit worked towards making a feature
update.
